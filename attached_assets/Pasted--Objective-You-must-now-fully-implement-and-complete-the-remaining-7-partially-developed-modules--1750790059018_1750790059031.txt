🧠 Objective:
You must now fully implement and complete the remaining 7 partially developed modules in the SignalOS Desktop App. These modules were verified as ⏳ partial in the last audit. For each one, follow the instructions below to finish logic, add missing integration, and ensure full test coverage.

✅ 1. entry_range.py — Entry Point Selector Finalization
Add missing selection modes:

"best" → lowest (BUY) or highest (SELL)

"second" → second best from sorted list

"average" → midpoint

Validate: fallback to single-entry if one value only

Update /tests/test_entry_range.py to reflect new logic

Integrate into parser.py and strategy_runtime.py

✅ 2. magic_number_hider.py — Implement Logic
Add function: generate_magic_number(symbol: str, user_id: str) → int

Should produce:

Consistent 5–6 digit hash for same symbol/user combo

Random suffix option for stealth mode

Integrate with strategy_runtime.py and mt5_bridge.py

Log used magic numbers to /logs/magic.log

Add tests in /tests/test_magic_number_hider.py

✅ 3. randomized_lot_inserter.py — Finish Hook Integration
Already implemented? Now connect to strategy_runtime.py:

Replace direct lotsize with get_randomized_lot(base_lot)

Hook logic:

±5–10% random noise around base lot

Respect min/max lot rules (0.01 – 5.0)

Add fallback to default if config missing

Confirm existing tests pass

✅ 4. end_of_week_sl_remover.py — Add Trigger Scheduler
Add scheduled check:

if today in [Friday, Sunday] and time > 22:00 → remove SL from open trades

Create function: remove_weekend_sl_trades(mt5_interface)

Hook into auto_sync.py or create end_of_week_job.py

Add tests in /tests/test_end_of_week_sl_remover.py

✅ 5. edit_trade_on_signal_change.py — Add Signal Parser Linkage
Add input parser: detect modified SL/TP from updated Telegram messages

Compare with original and trigger:

mt5_bridge.edit_trade(ticket_id, new_sl, new_tp)

Must store original state for diffing

Integrate into signal replay engine and copilot bot confirmation prompt

Add tests in /tests/test_edit_trade_on_signal_change.py

✅ 6. tp_adjustor.py — Add Test Coverage
If logic is implemented:

Add tests: adjust TP to +X pips, change to R:R, override from strategy

Mock inputs from ParsedSignal, user strategy config

Edge cases: no TP provided, override disabled, 3+ TPs

Tests: /tests/test_tp_adjustor.py

✅ 7. time_scheduler.py — Implement Time Logic Rules
Add should_execute_trade(signal_time, pair, provider) → bool

Configurable rules:

Time windows (e.g., only 09:00–15:00)

Block by weekdays

Accept config:

json
Copy
Edit
{
  "GOLD": {"start": "08:30", "end": "15:00"},
  "default": {"start": "00:00", "end": "23:59"}
}
Use datetime.now() and pytz for timezones

Tests in /tests/test_time_scheduler.py

📂 After Completing Each:

✅ Mark module complete in /attached_assets/feature_status.md

📘 Log summary in /attached_assets/dev_changelog.md

🧾 Record in /attached_assets/execution_history.md

🧪 Make Sure:

Each test suite runs ✅ with >90% coverage

Every module is imported at runtime in the relevant execution layer

No duplicate or conflicting logic remains from placeholder versions

